# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: MI-R4A-Immortalwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: MI-R4A/R4A2.conf.default
  CONFIG_FILE: MI-R4A/R4A2.config
  DIY_P1_SH: MI-R4A/diy2-part1.sh
  DIY_P2_SH: MI-R4A/R4A2.sh
  DIY_P3_SH: MI-R4A/diy2-part3.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check available branches
      run: |
        echo "=== 检查可用分支 ==="
        git ls-remote --heads $REPO_URL | grep -E "openwrt-|master" | cut -f2 | sed 's|refs/heads/||'

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        echo "正在克隆分支: $REPO_BRANCH"
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Debug - Check workspace structure
      run: |
        echo "=== 调试工作空间结构 ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "当前目录: $PWD"
        echo "根目录内容:"
        ls -la
        echo "MI-R4A 目录内容:"
        ls -la MI-R4A/
        echo "检查 DIY 脚本:"
        ls -la MI-R4A/*.sh
        echo "设置脚本权限:"
        chmod +x MI-R4A/diy2-part1.sh
        chmod +x MI-R4A/R4A2.sh
        chmod +x MI-R4A/diy2-part3.sh
        ls -la MI-R4A/*.sh

    - name: Load custom feeds and run DIY part 1
      run: |
        echo "=== 设置 feeds 和执行 DIY Part 1 ==="
        # 确保在正确目录
        cd $GITHUB_WORKSPACE
        
        # 复制 feeds 配置
        cp $FEEDS_CONF /workdir/openwrt/feeds.conf.default
        echo "Feeds 配置:"
        cat /workdir/openwrt/feeds.conf.default
        
        # 执行 DIY Part 1（在源码目录中）
        cd /workdir/openwrt
        chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
        cd /workdir/openwrt
        echo "=== 开始更新 feeds ==="
        ./scripts/feeds update -a
        echo "=== feeds 更新完成 ==="

    - name: Fix problematic packages
      run: |
        cd /workdir/openwrt
        echo "=== 修复有问题的包 ==="
        # 删除有问题的包目录
        rm -rf feeds/packages/lang/python/micropython 2>/dev/null || true
        rm -rf feeds/packages/libs/efivar 2>/dev/null || true
        echo "=== 修复完成 ==="

    - name: Install feeds
      run: |
        cd /workdir/openwrt
        echo "=== 安装 feeds ==="
        ./scripts/feeds install -a
        echo "=== feeds 安装完成 ==="

    - name: Load config and run DIY part 2
      run: |
        echo "=== 加载配置和执行 DIY Part 2 ==="
        
        # 确保在仓库目录
        cd $GITHUB_WORKSPACE
        
        # 复制配置文件
        if [ -f "$CONFIG_FILE" ]; then
            cp $CONFIG_FILE /workdir/openwrt/.config
            echo "配置文件已复制"
        else
            echo "警告: 配置文件 $CONFIG_FILE 不存在"
        fi
        
        # 复制 files 目录（如果有）
        if [ -d "files" ]; then
            cp -r files /workdir/openwrt/
            echo "files 目录已复制"
        fi
        
        # 执行 DIY Part 2
        cd /workdir/openwrt
        echo "执行 DIY Part 2..."
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
        echo "=== 当前配置前20行 ==="
        head -20 .config || echo "配置文件不存在"

    - name: Run DIY part 3
      run: |
        echo "=== 执行 DIY Part 3 ==="
        cd $GITHUB_WORKSPACE
        chmod +x $DIY_P3_SH
        $GITHUB_WORKSPACE/$DIY_P3_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Check configuration
      run: |
        cd /workdir/openwrt
        echo "=== 检查配置 ==="
        make defconfig
        echo "=== 目标设备配置 ==="
        grep "CONFIG_TARGET" .config | head -10

    - name: Download package
      id: package
      run: |
        cd /workdir/openwrt
        echo "=== 下载软件包 ==="
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd /workdir/openwrt
        echo -e "使用 $(nproc) 线程编译"
        
        # 完整编译
        echo "=== 开始编译 ==="
        make -j$(nproc) 2>&1 | tee compile.log || {
            echo "=== 编译失败，尝试单线程编译 ==="
            make -j1 V=s 2>&1 | tee -a compile.log || {
                echo "=== 最终编译失败 ==="
                tail -200 compile.log
                exit 1
            }
        }
        
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check build results
      if: always()
      run: |
        cd /workdir/openwrt
        echo "=== 检查构建结果 ==="
        ls -la bin/ 2>/dev/null || echo "bin目录不存在"
        find . -name "*.bin" -o -name "*.img" 2>/dev/null | head -10 || echo "未找到固件文件"

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: /workdir/openwrt/bin

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        echo "当前目录: $PWD"
        ls -la
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
